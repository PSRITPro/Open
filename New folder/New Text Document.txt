# CONFIGURATION
$siteUrl = "https://yourtenant.sharepoint.com/sites/yoursite"
$libraryName = "YourFormLibrary"
$newTemplateUrl = "https://yourtenant.sharepoint.com/sites/yoursite/YourFormLibrary/Forms/template.xsn"

# Connect to SharePoint
Connect-PnPOnline -Url $siteUrl -Interactive

# Get all list items in the form library
$items = Get-PnPListItem -List $libraryName -PageSize 100 -Fields "FileRef", "FileLeafRef"

Write-Host "Total items found: $($items.Count)"

foreach ($item in $items) {
    $fileUrl = $item["FileRef"]
    $fileName = $item["FileLeafRef"]

    try {
        # Download the file content as string (XML)
        $xmlContent = Get-PnPFile -Url $fileUrl -AsString

        # Check for presence of href in InfoPath processing instruction
        if ($xmlContent -notmatch 'href="[^"]+\.xsn"') {
            Write-Host "Missing template link in: $fileName - Updating..."

            # Inject the href attribute into the processing instruction
            # This regex finds the mso-infoPathSolution node
            $updatedXml = $xmlContent -replace '(<\?mso-infoPathSolution [^>]*?)\s*(\?>)', "`$1 href=`"$newTemplateUrl`" `$2"

            # Convert to byte stream and upload
            $bytes = [System.Text.Encoding]::UTF8.GetBytes($updatedXml)
            $stream = New-Object System.IO.MemoryStream (,$bytes)

            # Overwrite the updated file
            Set-PnPFile -SiteRelativeUrl $fileUrl -Stream $stream -List $libraryName -Force

            Write-Host "✅ Updated: $fileName"
        }
        else {
            Write-Host "✔️ Template already present: $fileName - Skipping."
        }
    }
    catch {
        Write-Host "❌ Error processing $fileName: $_"
    }
}
